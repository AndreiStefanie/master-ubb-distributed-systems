syntax = "proto3";
package message;
option go_package = ".;message";

// Data structures
message ProcessId {
    string host = 1;  // String containing either domain name  or IP (most likely)
    int32 port = 2;
    string owner = 3; // Short alias or acronym of the owner of the process
    int32 index = 4;  // Process index within the owner's processes. Must be 1, 2, or 3
    int32 rank = 5;   // Populated by the hub when initiating consensus with AppPropose. Do not calculate your own rank,
                      // just use this so that all nodes have the same values
}

message Value {       // Needed to model the undefined value that appears in the textbook
    bool defined = 1;
    int32 v = 2;      // Value; ignore if defined == false
}

// Messages and events
// Process
message ProcRegistration { // Send to hub upon process startup: Message(NetworkMessage(Message(ProcRegistration)))
    string owner = 1;     // Some short alias
    int32 index = 2;      // Process index: must be 1, 2, or 3
}

message ProcInitializeSystem { // Received from the HUB as Message(NetworkMessage(Message(AppInitializeSystem))). Should
                               // be handled by the process.
    repeated ProcessId processes = 1; // List of processes involved in the consensus algorithm (PI set)
}

message ProcDestroySystem { // Received from the HUB as Message(NetworkMessage(Message(AppDestroySystem))). Unregister
                            // and deactivate all abstractions belonging to the systemId found in the wrapping Message
}

// APP
message AppBroadcast { // Received from the HUB as Message(NetworkMessage(Message(AppBroadcast)))
                       // Triggers a BEB broadcast containing AppValue populated with the value from AppBroadcast
    Value value = 1;
}

message AppValue { // Broadcasted by the chosen source. Upon receiving it in a BebDeliver, send to HUB as
                   // Message(NetworkMessage(Message(AppValue)))
    Value value = 1;
}

message AppPropose { // Received from the HUB as Message(NetworkMessage(Message(AppPropose)))
    string topic = 1; // The topic on which to reach consensus. There will be a consensus instance for each topic
    Value value = 2; // Random value chosen by the HUB
}

message AppDecide {  // Upon receiving UcDecide, send to HUB as Message(NetworkMessage(Message(AppDecide)))
    Value value = 1; // Decided value taken from UcDecide
}

message AppRead { // Received from the HUB as Message(NetworkMessage(Message(AppRead)))
    string register = 1;
}

message AppWrite {  // Upon receiving UcDecide, send to HUB as Message(NetworkMessage(Message(AppWrite)))
    string register = 1;
    Value value = 2; // Value to write in the register
}

message AppReadReturn { // Upon receiving NnarReadReturn, send to HUB as Message(NetworkMessage(Message(AppReadReturn)))
    string register = 1;
    Value value = 2; // Value read from the register
}

message AppWriteReturn { // Upon receiving NnarWriteReturn, send to HUB as Message(NetworkMessage(Message(AppWriteReturn)))
    string register = 1;
}

// UC
// In the Init event or constructor, initialize l (leader) with the max-rank process in PI
message UcPropose {
    Value value = 1;
}

message UcDecide {
    Value value = 1;
}

// EP
message EpAbort {
}

message EpAborted {
    int32 ets = 1;  // Needed to know in UC the timestamp of the EP, where the algorithm says "such that ts = ets do"
    int32 valueTimestamp = 2; // The timestamp part of the "state" mentioned in the algorithm
    Value value = 3; // The value part of the "state" mentioned in the algorithm
}

message EpPropose {
    Value value = 1;
}

message EpDecide {
    int32 ets = 1; // Needed to know in UC the timestamp of the EP, where the algorithm says "such that ts = ets do"
    Value value = 2;
}

message EpInternalRead {
}

message EpInternalState {
    int32 valueTimestamp = 1;
    Value value = 2;
}

message EpInternalWrite {
    Value value = 1;
}

message EpInternalAccept {
}

message EpInternalDecided {
    Value value = 1;
}

// EC
// In the Init event or constructor, initialize "trusted" with the max-rank process in PI
message EcInternalNack {
}

message EcStartEpoch {
    int32 newTimestamp = 1;
    ProcessId newLeader = 2;
}

message EcInternalNewEpoch {
    int32 timestamp = 1;
}

// BEB
message BebBroadcast {
    Message message = 1;
}

message BebDeliver {
    Message message = 1;
    ProcessId sender = 2;
}

// ELD
message EldTimeout {
}

message EldTrust {
    ProcessId process = 1;
}

// NNAR
message NnarRead {
}

message NnarInternalRead {
    int32 readId = 1;
}

message NnarInternalValue {
    int32 readId = 1;
    int32 timestamp = 2;
    int32 writerRank = 3;
    Value value = 4;
}

message NnarInternalWrite {
    int32 readId = 1;
    int32 timestamp = 2;
    int32 writerRank = 3;
    Value value = 4;
}

message NnarWrite {
    Value value = 1;
}

message NnarInternalAck {
    int32 readId = 1;
}

message NnarReadReturn {
    Value value = 1;
}

message NnarWriteReturn {
}

// EPFD
// Use as timer delay "delta" 100 milliseconds
message EpfdTimeout {
}

message EpfdInternalHeartbeatRequest {
}

message EpfdInternalHeartbeatReply {
}

message EpfdSuspect {
    ProcessId process = 1;
}

message EpfdRestore {
    ProcessId process = 1;
}

// PL
message PlSend {
    ProcessId destination = 1;
    Message message = 2;
}

message PlDeliver {
    ProcessId sender = 1;
    Message message = 2;
}

// Network-traveling message
// When handling MessageA(PlSend(MessageB)) create MessageC(NetworkMessage(MessageB)), setting:
//     MessageC.SystemId = MessageA.SystemId
//     MessageC.ToAbstractionId = MessageA.ToAbstractionId
//     NetworkMessage.senderHost = N/A (ignore)
//     NetworkMessage.senderListeningPort = The your listening port
// Then marshal MessageC to byte buffer and send:
//    bytes 0 - 3: buffer length
//    bytes 4 -  : buffer data
// When unmarshalling from a buffer received from the network create MessageD(PlDeliver(MessageB)), setting:
//     MessageD.ToAbstractionId = MessageC.ToAbstractionId
message NetworkMessage {
    string senderHost = 1;
    int32 senderListeningPort = 2;
    Message message = 3;
}

// Wrapper message
message Message {
    enum Type {
        NETWORK_MESSAGE = 0;

        PROC_REGISTRATION = 1;
        PROC_INITIALIZE_SYSTEM = 2;
        PROC_DESTROY_SYSTEM = 3;

        APP_BROADCAST = 4;
        APP_VALUE = 5;
        APP_DECIDE = 6;
        APP_PROPOSE = 7;
        APP_READ = 8;
        APP_WRITE = 9;
        APP_READ_RETURN = 10;
        APP_WRITE_RETURN = 11;

        UC_DECIDE = 20;
        UC_PROPOSE = 21;

        EP_ABORT = 30;
        EP_ABORTED = 31;
        EP_DECIDE = 32;
        EP_INTERNAL_ACCEPT = 33;
        EP_INTERNAL_DECIDED = 34;
        EP_INTERNAL_READ = 35;
        EP_INTERNAL_STATE = 36;
        EP_INTERNAL_WRITE = 37;
        EP_PROPOSE = 38;

        EC_INTERNAL_NACK = 40;
        EC_INTERNAL_NEW_EPOCH = 41;
        EC_START_EPOCH = 42;

        BEB_BROADCAST = 50;
        BEB_DELIVER = 51;

        ELD_TIMEOUT = 60;
        ELD_TRUST = 61;

        NNAR_INTERNAL_ACK = 70;
        NNAR_INTERNAL_READ = 71;
        NNAR_INTERNAL_VALUE = 72;
        NNAR_INTERNAL_WRITE = 73;
        NNAR_READ = 74;
        NNAR_READ_RETURN = 75;
        NNAR_WRITE = 76;
        NNAR_WRITE_RETURN = 77;

        EPFD_INTERNAL_HEARTBEAT_REPLY = 80;
        EPFD_INTERNAL_HEARTBEAT_REQUEST = 81;
        EPFD_RESTORE = 82;
        EPFD_SUSPECT = 83;
        EPFD_TIMEOUT = 84;

        PL_DELIVER = 90;
        PL_SEND = 91;
    }

    Type type = 1;
    string messageUuid = 2;
    string FromAbstractionId = 3; // Abstraction ID constructed as shown to the right of the system diagram
    string ToAbstractionId = 4; // Abstraction ID constructed as shown to the right of the system diagram
    string systemId = 5;

    NetworkMessage networkMessage = 6;

    ProcRegistration procRegistration = 7;
    ProcInitializeSystem procInitializeSystem = 8;
    ProcDestroySystem procDestroySystem = 9;

    AppBroadcast appBroadcast = 10;
    AppValue appValue = 11;
    AppPropose appPropose = 12;
    AppDecide appDecide = 13;
    AppRead appRead = 14;
    AppWrite appWrite = 15;
    AppReadReturn appReadReturn = 16;
    AppWriteReturn appWriteReturn = 17;

    UcDecide ucDecide = 20;
    UcPropose ucPropose = 21;

    EpAbort epAbort = 30;
    EpAborted epAborted = 31;
    EpInternalAccept epInternalAccept = 32;
    EpDecide epDecide = 33;
    EpInternalDecided epInternalDecided = 34;
    EpPropose epPropose = 35;
    EpInternalRead epInternalRead = 36;
    EpInternalState epInternalState = 37;
    EpInternalWrite epInternalWrite = 38;

    EcInternalNack ecInternalNack = 41;
    EcInternalNewEpoch ecInternalNewEpoch = 42;
    EcStartEpoch ecStartEpoch = 43;

    BebBroadcast bebBroadcast = 50;
    BebDeliver bebDeliver = 51;

    EldTimeout eldTimeout = 60;
    EldTrust eldTrust = 61;

    NnarInternalAck nnarInternalAck = 70;
    NnarInternalRead nnarInternalRead = 71;
    NnarInternalValue nnarInternalValue = 72;
    NnarInternalWrite nnarInternalWrite = 73;
    NnarRead nnarRead = 74;
    NnarReadReturn nnarReadReturn = 75;
    NnarWrite nnarWrite = 76;
    NnarWriteReturn nnarWriteReturn = 77;

    EpfdTimeout epfdTimeout = 80;
    EpfdInternalHeartbeatRequest epfdInternalHeartbeatRequest = 81;
    EpfdInternalHeartbeatReply epfdInternalHeartbeatReply = 82;
    EpfdSuspect epfdSuspect = 83;
    EpfdRestore epfdRestore = 84;

    PlDeliver plDeliver = 90;
    PlSend plSend = 91;
}
